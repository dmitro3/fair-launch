/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MyTokensRouteImport } from './routes/my-tokens'
import { Route as CreateRouteImport } from './routes/create'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TokenIndexRouteImport } from './routes/token/index'
import { Route as TokenTokenIdRouteImport } from './routes/token/$tokenId'

const MyTokensRoute = MyTokensRouteImport.update({
  id: '/my-tokens',
  path: '/my-tokens',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TokenIndexRoute = TokenIndexRouteImport.update({
  id: '/token/',
  path: '/token/',
  getParentRoute: () => rootRouteImport,
} as any)
const TokenTokenIdRoute = TokenTokenIdRouteImport.update({
  id: '/token/$tokenId',
  path: '/token/$tokenId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/my-tokens': typeof MyTokensRoute
  '/token/$tokenId': typeof TokenTokenIdRoute
  '/token': typeof TokenIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/my-tokens': typeof MyTokensRoute
  '/token/$tokenId': typeof TokenTokenIdRoute
  '/token': typeof TokenIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/my-tokens': typeof MyTokensRoute
  '/token/$tokenId': typeof TokenTokenIdRoute
  '/token/': typeof TokenIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/create' | '/my-tokens' | '/token/$tokenId' | '/token'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/create' | '/my-tokens' | '/token/$tokenId' | '/token'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/my-tokens'
    | '/token/$tokenId'
    | '/token/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  MyTokensRoute: typeof MyTokensRoute
  TokenTokenIdRoute: typeof TokenTokenIdRoute
  TokenIndexRoute: typeof TokenIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/my-tokens': {
      id: '/my-tokens'
      path: '/my-tokens'
      fullPath: '/my-tokens'
      preLoaderRoute: typeof MyTokensRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/token/': {
      id: '/token/'
      path: '/token'
      fullPath: '/token'
      preLoaderRoute: typeof TokenIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/token/$tokenId': {
      id: '/token/$tokenId'
      path: '/token/$tokenId'
      fullPath: '/token/$tokenId'
      preLoaderRoute: typeof TokenTokenIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  MyTokensRoute: MyTokensRoute,
  TokenTokenIdRoute: TokenTokenIdRoute,
  TokenIndexRoute: TokenIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
